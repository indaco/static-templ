package generator

import (
	"html/template"
	"os"

	"github.com/nokacper24/templ-static-generator/internal/finder"
)

const outputScript = `// Code generated by TEMPL STATIC GENERATOR; DO NOT EDIT.
package main

import (
	"context"
	"os"
	"log"
	{{- range .Imports }}
	"{{ . }}"
	{{- end }}
)

func main() {

	ctx := context.Background()

	{{- range .FilesToGenerate }}
	{{ .PackageName }}{{ .FunctionName }}Path := {{.FilePath}}




	{{- end }}

	p := "dist/test/file.html"

	if err := os.MkdirAll(filepath.Dir(p), os.ModePerm); err != nil {
		log.Fatal("error creating dirs:", err)
	}

	f, err := os.Create(p)
	if err != nil {
		log.Fatal("error creating file:", err)
	}

	pages.Index().Render(ctx,f)

}
`

type InputData struct {
	Imports []string
	// FilesToGenerate []finder.FileToGenerate
	FilesToGenerate []StringedData
}

type StringedData struct {
	FuncToCall string
	FilePath   string
}

func Generate(imports []string, funcs []finder.FileToGenerate) error {
	var stringed []StringedData
	for _, f := range funcs {
		stringed = append(stringed, StringedData{
			f.FunctionName,
			f.ToGenerate("web/pages/", "dist/"),
		})
	}

	data := InputData{
		Imports:         imports,
		FilesToGenerate: stringed,
	}

	tmpl, err := template.New("output").Parse(outputScript)
	if err != nil {
		return err
	}

	f, err := os.Create("cmd/output.go")
	if err != nil {
		return err
	}
	defer f.Close()

	err = tmpl.Execute(f, data)
	if err != nil {
		return err
	}

	return nil
}
